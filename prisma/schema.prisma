// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  VIP
  ADMIN
}

enum PredictionResult {
  PENDING
  WON
  LOST
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
  DAILY
  WEEKLY
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  predictions   Prediction[]
  subscriptions Subscription[]
  payments      Payment[]
  emailVerified Boolean        @default(false)
  location      String         @default("")

  Notification Notification[]

  BlogPost BlogPost[]
}

model Prediction {
  id          String           @id @default(uuid())
  league      String
  homeTeam    String
  awayTeam    String
  tip         String
  analysis    String?
  odds        Float?
  result      PredictionResult @default(PENDING)
  publishedAt DateTime
  createdBy   User             @relation(fields: [userId], references: [id])
  userId      String
  isFree      Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  league_rel  League           @relation(fields: [league], references: [name])

  @@index([league])
  @@index([publishedAt])
}

model Subscription {
  id                   String             @id @default(uuid())
  user                 User               @relation(fields: [userId], references: [id])
  userId               String
  plan                 SubscriptionPlan
  status               SubscriptionStatus @default(ACTIVE)
  startedAt            DateTime
  expiresAt            DateTime
  flutterwavePaymentId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([userId])
  @@index([status])
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  currency  String
  provider  String        @default("Flutterwave")
  status    PaymentStatus
  reference String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model League {
  id          String       @id @default(uuid())
  name        String       @unique
  predictions Prediction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Settings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  content     String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
}